
Set up fastFill
    [] spawn creeps
    [] set up role


Set up soldier/healer duos
    [] Kill an invader quad squad
    [] Include ranged parts
    [] Duo Movement
    [] Spawn as Duo 

[] Explorers:
    [] Write role.scout.js
        [x] Record unexplored room data.
        [x] Find closest unexplored room.
        [x] Navigate to target room.
        [x] Prevent traveling through 'unsafe to travel' rooms.
        [x] Set some sort of range limit on how far the scout can travel from home
        [] Log scout report, which rooms it targeted. Output report on death.
        [x] Re-write search pattern to search nearest room closest to homeroom first
        [] Test
    [x] Update spawnCreeps.js
        [x] Determine if an explorer is needed.
            - If there is an observer, there is no need for Explorers
            - Only spawn explorers after RCL 3
        [x] Spawn an explorer.
        [x] Test
    []  write expansionManager.js
        [x] shifts first entered explorer data when neigbors length > 100 (11x11)
        [] Finds attack targets
        [x] finds long distance harvest targets
    [x] Convert scout data to heap memory
        [x] role.scout.js
        [x] expansionManager.js   

Manage Remote harvesting:
    [x] Map & store infrasctructure
    [x] Create roles
        [x] Remote worker
            [x] Move to target room
            [x] Harvest mineral
            [x] Build construction site
            [x] Repair road
            [x] Find new target when room done.
        [x] Remote miner
            [x] Move to target room
            [x] Find target
            [x] harvest target
        [x] Remote hauler
            [x] Move to target room
            [] Pickup minerals
                [] Tombstones
                [] Dropped
                [x] Container

Autobuild:
    [] Move towers to near ramparts
    [] Fix issue where island of spawns are placed away from base
    [] Consider adding even more dynamic extension placements

re-organize roles:
    [] Define bodyparts for each
    [] Implement decentralized role.x.js task management
    [] roleFiller
        [x] Create role.filler.js
        [] Integrate filler forecast into structure.forecast() 
    [] roleWallbuilder
    [x] roleBuilder
    [] roleUpgrader



Outposts:
    [x] First declare outposts in rooms connected to home room
    [] Once those are set up, build outposts in rooms connected to outpost rooms - Then thats it.
    [x] Implement better pathfinding for roads to outposts.
        [x] Roads need to have the same x or y coordinate from room to room (depending on if they are a top/bottom exit or left/right exit)
    [] Simplify status/process for actually adding expanded outposts in expansionManager
    [] Reserve outposts for higher revenue

Towers:
    [x] If towers are not causing damage, ignore target until it moves closer.
    [] Test.

Defense:
    [] Outpost worker report hostiles
    [] Spawn soliders to defend outposts based on requests

Spawning:
    [] Organize bodypart sorting
    [] Re-organize spawnCreeps
        [] Run checks as needed
        [] Set room bootup requirements
        [] Static bodyparts based on levels for CPU

Pathfinding:
    [x] Better pathfinding for remote creeps
    [x] Move pathfinding to heap memory
    [x] Setup pathfinding costmatrix for each room
    [x] Pathfinding only generates costmatrix if a creep tries to move and there is no costmatrix.
    [] Fix pathfinding to exits ( finding new exit every tick )
    [] Transfer Filler clearMemory/task class, initialize to tasks.js

tasks:
    [x] create task.js
    [x] implement tasks into main
    [x] Clear tasks for dead creaps
    [] Clear paths when clearing tasks
    [] Add multi-task support

Prototypes:
    [] Implement task.js functionality for forecasting

Links:
    [] Give each link a role and store by ID in heap.
    [x] Fill link near storage
    [] Link energy from storage link to controller link
    [] Add withdrawing from link for upgrader

Labs:
    [] Research Labs
    [] Fill Labs
    [] Make materials
    [] Empty Labs


Calcualte builder body:
    [] Write function that generates a body for builder
    [] Require at least 1 W/M/C parts
    [] Calculate average travel time of contruction sites



Example
    https://discord.com/channels/860665589738635336/866441713383637032/1004523576755499079

    I'm trying to naively brute-force body combinations for builders. Anybody want to check my work?

    function test(workParts = 1, moveParts = 1, carryParts = 1, distance = 300, workToBeDone = 3000) {
    const carryCapacity = carryParts * 50;
    const buildPower = workParts * 5;
    const trips = Math.ceil(workToBeDone / buildPower / carryCapacity);
    const speed = Math.min(1, moveParts / (workParts + carryParts / 2));
    const travelTime = ((distance * 2) / speed) * trips;
    const workTime = (carryCapacity / buildPower) * trips;

    const time = travelTime + workTime;
    const costPerTick = (workParts * 100 + moveParts * 50 + carryParts * 50) / 1500;

    return [
        costPerTick * time,
        `${workParts}W/${moveParts}M/${carryParts}C: ${time.toFixed(0)} @ ${costPerTick.toFixed(2)}`
    ];
    }

    function permute(i) {
    return [test(i, 1, 1), test(i, i, 1), test(i, 1, i), test(1, i, i), test(i, i + 1, 1), test(1, i + 1, i)];
    }

    const results = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10].flatMap(i => permute(i + 1)).reduce((a, b) => (a[0] < b[0] ? a : b));

    console.log(results[1]);


    Results:

    distance: 10 6W/7M/1C: 43 @ 0.67
    distance: 20 6W/7M/1C: 83 @ 0.67
    distance: 30 6W/7M/1C: 123 @ 0.67
    distance: 40 6W/7M/1C: 163 @ 0.67
    distance: 50 6W/7M/1C: 203 @ 0.67
    distance: 60 1W/4M/4C: 480 @ 0.33
    distance: 70 1W/4M/4C: 540 @ 0.33
    distance: 80 1W/4M/4C: 600 @ 0.33
    distance: 90 1W/4M/4C: 660 @ 0.33
    distance: 100 1W/4M/4C: 720 @ 0.33
    distance: 110 1W/4M/4C: 780 @ 0.33
    distance: 120 1W/6M/6C: 600 @ 0.47
    distance: 130 1W/6M/6C: 640 @ 0.47
    distance: 140 1W/6M/6C: 680 @ 0.47
    distance: 150 1W/6M/6C: 720 @ 0.47
    distance: 160 1W/6M/6C: 760 @ 0.47
    distance: 170 1W/6M/6C: 800 @ 0.47
    distance: 180 1W/6M/6C: 840 @ 0.47
    distance: 190 1W/6M/6C: 880 @ 0.47
    that's optimizing for (minion cost per tick * build time) at varying distances


Tasks:

known bugs:
    [] Creeps in W37S1 try and path through terrain walls. Add check for this

To update controller level:
storage.db['rooms.objects'].update({ _id: '5fe40774411d32f' },{ $set: { level: 3 }})